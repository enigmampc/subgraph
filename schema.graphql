type EnigmaState @entity {
  " Always equals to 'current'"
  id: ID!

  " Epoch size in number of blocks "
  epochSize: BigInt!

  " Most recent epoch "
  latestEpoch: Epoch

  " Number of created Tasks "
  tasksCount: BigInt!

  " Number of completed Tasks "
  tasksCompletedCount: BigInt!

  " Number of failed Tasks "
  tasksFailedCount: BigInt!

  " Number of Workers "
  workerCount: BigInt!
}

type Epoch @entity {
  " Epoch nonce "
  id: ID!

  " Order number "
  order: BigInt!

  " Block number principal node is attempting to set worker params "
  inclusionBlockNumber: BigInt!

  " Locally-computed first block number of epoch "
  startBlockNumber: BigInt!

  " The random integer generated by the enclave "
  seed: BigInt!

  " Creation timestamp as seconds "
  startTime: BigInt!

  " Active workers in the epoch "
  workers: [Worker!]!

  " Tasks created in the epoch "
  tasks: [Task!] @derivedFrom(field: "epoch")

  " ENG gas used during this epoch"
  gasUsed: BigInt

  " ENG reward "
  reward: BigDecimal

  " Number of created Tasks "
  tasksCount: BigInt!

  " Number of completed Tasks "
  tasksCompletedCount: BigInt!

  " Number of failed Tasks "
  tasksFailedCount: BigInt!
}

type SecretContract @entity {
  " Equals to: <taskId> "
  id: ID!

  " Contract address "
  address: Bytes!

  " Deployed bytecode hash "
  codeHash: Bytes!

  " Initial state delta hash as a result of the contract's constructor "
  initStateDeltaHash: Bytes!

  " Creation timestamp as seconds "
  createdAt: BigInt!

  " Creation block number "
  createdAtBlock: BigInt!

  " Creation transaction hash "
  createdAtTransaction: Bytes!
}

type Task @entity {
  " Task ID "
  id: ID!

  " Order number "
  order: BigInt!

  " Inputs hash of encryptedFn, encryptedArgs, and contract address/preCodeHash "
  inputsHash: Bytes!

  " Output hash of task computation "
  outputHash: Bytes

  " ENG gas limit units "
  gasLimit: BigDecimal!

  " ENG gas px in grains (10 ** 8) amount "
  gasPx: BigDecimal!

  " ENG gas used "
  gasUsed: BigInt

  " Sender address "
  sender: Bytes!

  " Task status "
  status: TaskStatus!

  " Secret contract address "
  scAddr: Bytes

  " Ethereum contract address "
  optionalEthereumContractAddress: Bytes

  " Worker "
  worker: Worker

  " Epoch "
  epoch: Epoch

  " Creation timestamp as seconds "
  createdAt: BigInt!

  " Creation block number "
  createdAtBlock: BigInt!

  " Creation transaction hash "
  createdAtTransaction: Bytes!

  " Last status change (complete or fail) timestamp as seconds "
  changedAt: BigInt

  " Last status change (complete or fail) block number "
  changedAtBlock: BigInt

  " Last status change (complete or fail) transaction hash "
  changedAtTransaction: Bytes
}

enum TaskStatus {
  RecordUndefined
  RecordCreated
  ReceiptVerified
  ReceiptFailed
  ReceiptFailedETH
  ReceiptFailedReturn
}

" The data representation of a worker (or node) "
type Worker @entity {
  " Equals to: <custodianAddress> "
  id: ID!

  " ENG balance of worker "
  balance: BigDecimal!

  " The worker's custodian address "
  custodianAddress: Bytes!

  " The signer address, derived from the enclave public key "
  signerAddress: Bytes!

  " Worker status "
  status: WorkerStatus!

  " Creation timestamp as seconds "
  createdAt: BigInt!

  " Creation block number "
  createdAtBlock: BigInt!

  " Creation transaction hash "
  createdAtTransaction: Bytes!

  " Epochs in with the worker was active "
  epochs: [Epoch!]!

  " Tasks worked "
  tasks: [Task!] @derivedFrom(field: "worker")

  " ENG reward "
  reward: BigDecimal

  " Logs containing info regarding updates in worker status "
  logs: [WorkerLog!] @derivedFrom(field: "worker")

  " Number of completed Tasks "
  tasksCompletedCount: BigInt!

  " Number of failed Tasks "
  tasksFailedCount: BigInt!
}

" This allows to search workers by their signer address "
type WorkerSigner @entity {
  " Equals to: <signerAddress> "
  id: ID!

  " The worker's custodian address "
  custodianAddress: Bytes!
}

enum WorkerStatus {
  Unregistered
  LoggedIn
  LoggedOut
}

" Info regarding updates in a worker status "
type WorkerLog @entity {
  id: ID!

  " Worker ID "
  worker: Worker!

  " Worker log type "
  type: WorkerLogType!

  " ENG balance of worker "
  balance: BigDecimal!

  " Block number "
  timestamp: BigInt!

  " Block number "
  block: BigInt!

  " Block number "
  transaction: Bytes!
}

enum WorkerLogType {
  Undefined
  LogIn
  LogOut
  Compound
}
